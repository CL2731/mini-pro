{"version":3,"sources":["components/BucketForm.js","components/Bucket.js","components/BucketList.js","App.js","index.js"],"names":["BucketForm","props","useState","input","setInput","eagerness","setEagerness","eagernessLevel","handleSubmit","e","preventDefault","onSubmit","id","Math","random","floor","text","handleChange","target","value","edit","className","type","placeholder","name","onChange","onClick","Bucket","setEdit","console","log","bucket","editBucketItem","map","item","index","isComplete","completeBucketItem","removeBucketItem","BucketList","setBucket","updatedBucket","filter","itemId","newValue","prev","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e39ccd5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction BucketForm(props) {\r\n  const [input, setInput] = useState('');\r\n  let [eagerness, setEagerness] = useState('');\r\n\r\n  // TODO: Use this array in the return statement below\r\n  const eagernessLevel = ['high', 'medium', 'low']\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!eagerness) {\r\n      eagerness = 'low';\r\n    }\r\n\r\n    props.onSubmit({\r\n      id: Math.random(Math.floor() * 1000),\r\n      text: input,\r\n      eagerness: eagerness,\r\n    });\r\n\r\n    setInput('');\r\n    setEagerness('');\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  // First we check to see if \"edit\" prop exists. If not, we render the normal form\r\n  // If the prop \"edit\" exists, we know to render the update form instead\r\n  return !props.edit ? (\r\n    <div>\r\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Add to your bucket list\"\r\n          value={input}\r\n          name=\"text\"\r\n          className=\"bucket-input\"\r\n          onChange={handleChange}\r\n        ></input>\r\n        <div className=\"dropdown\">\r\n          <button className={`dropbtn ${eagerness}`}>\r\n            {eagerness || 'Priority'}\r\n          </button>\r\n          <div className=\"dropdown-content\">\r\n            {/* TODO: Add an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */}\r\n            <p onClick={() => setEagerness(eagernessLevel[0])}>Must do</p>\r\n            <p onClick={() => setEagerness(eagernessLevel[1])}>Want to do</p>\r\n            <p onClick={() => setEagerness(eagernessLevel[2])}>Take it or leave it</p>\r\n          </div>\r\n        </div>\r\n        <button className=\"bucket-button\">Add bucket list item</button>\r\n      </form>\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <h3>Update entry: {props.edit.value}</h3>\r\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder={props.edit.value}\r\n          value={input}\r\n          name=\"text\"\r\n          className=\"bucket-input\"\r\n          onChange={handleChange}\r\n        ></input>\r\n        <div className=\"dropdown\">\r\n          <button className={`dropbtn ${eagerness}`}>\r\n            {eagerness || 'Priority'}\r\n          </button>\r\n          <div className=\"dropdown-content\">\r\n            {/* TODO: Add an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */}\r\n            <p onClick={() => setEagerness(eagernessLevel[0])}>Must do</p>\r\n            <p onClick={() => setEagerness(eagernessLevel[1])}>Want to do</p>\r\n            <p onClick={() => setEagerness(eagernessLevel[2])}>Take it or leave it</p>\r\n          </div>\r\n        </div>\r\n        <button className=\"bucket-button\">Update</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BucketForm;\r\n","import React, { useState } from 'react';\r\nimport BucketForm from './BucketForm';\r\n\r\nfunction Bucket(props) {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: '',\r\n    eagerness: '',\r\n  });\r\n\r\n  console.log(props.bucket);\r\n\r\n  const submitUpdate = (value) => {\r\n\r\n    // TODO: Write logic to update the `edit` value in state after a user updates an entry in the list\r\n    props.editBucketItem(edit.id, value);\r\n    // TODO: Set the key:value pairs in the `edit` object back to empty strings\r\n    setEdit({id: null, value: '', eagerness: ''});\r\n  };\r\n\r\n  // If the user is attempting to edit an item, render the bucket form with the edit variable passed as a prop\r\n  if (edit.id) {\r\n    return <BucketForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return props.bucket.map((item, index) => (\r\n    // TODO: Add a className of `bucket row complete ${item.eagerness}` for completed items, and `bucket-row ${item.eagerness}` for non-completed items\r\n    // TODO: Add a key attribute set to the value of the index position\r\n    // Hint: use a ternary operator\r\n    <div className={item.isComplete ? `bucket row complete ${item.eagerness}` : `bucket-row ${item.eagerness}`} key={item.id}>\r\n      <div onClick={() => props.completeBucketItem(item.id)}>\r\n          {/* TODO: Add the item text here */}\r\n          {item.text}\r\n      </div>\r\n      <div className=\"icons\">\r\n        <p onClick={() => setEdit({id :item.id, value: item.value, eagerness: item.eagerness})}> ‚úèÔ∏è</p>\r\n        {/* TODO: Add an onClick event that will invoke the removeBucketItem method passing in the `item.id` */}\r\n        <p onClick={() => props.removeBucketItem(item.id)}> üóëÔ∏è</p>\r\n      </div>\r\n    </div>\r\n  ));\r\n}\r\n\r\nexport default Bucket;\r\n","import React, { useState } from 'react';\r\nimport BucketForm from './BucketForm';\r\nimport Bucket from './Bucket';\r\n\r\nfunction BucketList() {\r\n  const [bucket, setBucket] = useState([]);\r\n\r\n  // Function to add a bucket list item\r\n  const addBucketItem = (item) => {\r\n\r\n    // TODO: Write logic to add the new bucket item to the bucket state variable\r\n    setBucket([...bucket, item]);\r\n  };\r\n\r\n  // Function to mark bucket list item as complete\r\n  const completeBucketItem = (id) => {\r\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\r\n    let updatedBucket = bucket.map((item) => {\r\n\r\n      // TODO: Write logic that marks an item as complete or incomplete when invoked\r\n      if (item.id === id) {\r\n        item.isComplete = true;\r\n      }\r\n      return item;\r\n    });\r\n\r\n    setBucket(updatedBucket);\r\n  };\r\n\r\n  // Function to remove bucket list item and update state\r\n  const removeBucketItem = (id) => {\r\n    // TODO: Write logic that will return an array of items that don't contain the ID passed to this function\r\n    let updatedBucket = bucket.filter((item) => item.id !== id);\r\n\r\n    // TODO: Update the bucket state variable\r\n    setBucket(updatedBucket);\r\n  };\r\n\r\n  // Function to edit the bucket list item\r\n  const editBucketItem = (itemId, newValue) => {\r\n    // Make sure that the value isn't empty\r\n    if (!newValue.text) {\r\n      return;\r\n    }\r\n\r\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\r\n    // We then check to see if the item ID matches the id of the item that was clicked and if so, we set it to a new value\r\n    setBucket((prev) =>\r\n      prev.map((item) => (item.id === itemId ? newValue : item))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>What is on your bucket list?</h1>\r\n      <BucketForm onSubmit={addBucketItem} />\r\n      <Bucket\r\n        bucket={bucket}\r\n        completeBucketItem={completeBucketItem}\r\n        removeBucketItem={removeBucketItem}\r\n        editBucketItem={editBucketItem}\r\n      ></Bucket>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BucketList;\r\n","import './App.css';\r\nimport BucketList from './components/BucketList';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"bucket-app\">\r\n      <BucketList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}